name: Build and Unit Tests

on: [push]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Start timer
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Cache NPM dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.npm
            .next/cache
          key: npm-${{ hashFiles('package-lock.json') }}-build
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run Build
        run: npm run build

      - name: Save Build duration
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "BUILD_DURATION=$DURATION" >> $GITHUB_ENV

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Start timer
        run: echo "START_TIME=$(date +%s)" >> $GITHUB_ENV

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22

      - name: Restore NPM cache
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: npm-${{ hashFiles('package-lock.json') }}-build
          restore-keys: |
            npm-

      - name: Install dependencies
        run: npm ci --prefer-offline

      - name: Run Unit Tests
        run: npm run test:unit

      - name: Save Unit Test duration
        run: |
          END_TIME=$(date +%s)
          DURATION=$((END_TIME - START_TIME))
          echo "UNIT_DURATION=$DURATION" >> $GITHUB_ENV

  summary:
    name: Build + Unit Tests Summary
    runs-on: ubuntu-latest
    needs: [build, unit-tests]
    if: always()
    steps:
      - name: Generate Summary
        run: |
          echo "## ðŸš€ Build + Unit Tests Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status | Duration |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|---------|" >> $GITHUB_STEP_SUMMARY
          BUILD_MIN=$((needs.build.outputs.BUILD_DURATION/60))
          BUILD_SEC=$((needs.build.outputs.BUILD_DURATION%60))
          UNIT_MIN=$((needs['unit-tests'].outputs.UNIT_DURATION/60))
          UNIT_SEC=$((needs['unit-tests'].outputs.UNIT_DURATION%60))
          echo "| Build | ${{ needs.build.result }} | ${BUILD_MIN}m ${BUILD_SEC}s |" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs['unit-tests'].result }} | ${UNIT_MIN}m ${UNIT_SEC}s |" >> $GITHUB_STEP_SUMMARY
